meta {
  name: All known users- usage statistics
  type: http
  seq: 1
}

get {
  url: {{protocol}}://{{delegatedURL}}/_matrix/media/unstable/admin/usage/{{url}}/users-stats?limit=100&order_by=media_length&dir=b
  body: none
  auth: none
}

query {
  access_token: {{mmrAdminSecret}}
  limit: 100
  order_by: media_length
  dir: b
  ~from: 100
}

tests {
  // const template = `
  //     <link rel="stylesheet" type="text/css" href="{{handlebarAssets.styleURL}}" />
  //     <script src="{{handlebarAssets.javascriptURL}}"></script>
  // 
  //     <table bgcolor="#FFFFFF">
  //         <tr>
  //             <th>Matrix ID</th>
  //             <th>Media Count</th>
  //             <th>Media Size</th>
  //         </tr>
  // 
  //         {{#each users}}
  //             <tr>
  //                 <td>{{user_id}}</td>
  //                 <td>{{media_count}}</td>
  //                 <td>{{media_length_hr}}</td>
  //             </tr>
  //         {{/each}}
  //     </table>
  // `;
  // 
  // /**
  //  * Convert bytes to human readable size
  //  * @param {Number} bytes    size
  //  * @returns {String}        For example 341.14 MB
  //  */
  // function bytesToHumanReadable(bytes) {
  //     if (bytes === 0) {
  //         return '0.00 B';
  //     }
  //     const e = Math.floor(Math.log(bytes) / Math.log(1024));
  //     const hrValue = (bytes / Math.pow(1024, e)).toFixed(2);
  //     const label = ' KMGTP'.charAt(e);
  //     return `${hrValue} ${label}B`;
  // }
  // 
  // const { users } = response.body;
  // 
  // users.forEach((user) => {
  //     user.media_length_hr = bytesToHumanReadable(user.media_length);
  // });
  // 
  // // Call the visualizer template with all collected data
  // const handlebarAssets = {
  //     javascriptURL: `${pm.globals.get('assetsURL')}script.js`,
  //     styleURL: `${pm.globals.get('assetsURL')}style.css`,
  // };
  // 
  // pm.visualizer.set(template, {
  //     // Pass the response body parsed as JSON as `data`
  //     handlebarAssets,
  //     users,
  // });
  // 
}
